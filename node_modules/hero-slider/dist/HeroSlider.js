import React__default from 'react';
import HeroSliderModuleCss from './HeroSlider.module.css.js';
import Buttons from './components/Buttons/index.js';
import { SettingsProvider, useSettings } from './modules/Settings.js';
import { AnimationsProvider, useAnimations } from './modules/Animations.js';
import { ControllerProvider, useController } from './modules/Controller.js';
import { LayoutProvider, useLayout } from './modules/Layout.js';
import { AccessabilityProvider, useAccessability } from './modules/Accessability.js';
import { AutoplayProvider, useAutoplay } from './modules/Autoplay.js';
import { ManagerProvider } from './modules/Manager.js';
import { IntersectionObserverProvider, useIntersectionObserver } from './modules/IntersectionObserver.js';
import { composeCssClasses } from './utils/composeCssClasses.js';
import ConsoleLogger from './modules/ConsoleLogger.js';

const logger = ConsoleLogger.new();
function Orchestrator({ className, width = '100%', height = '100vh', style, children }) {
    logger.info('[Orchestrator] rerender');
    const { shouldDisplayButtons } = useAccessability();
    const { sliderFadeInDuration, navbarFadeInDuration, navbarFadeInDelay } = useAnimations();
    const { state: layout } = useLayout();
    const { slidingDuration, slidingDelay, getSlidingCycleDuration } = useController();
    const settings = useSettings();
    const { debounce } = useAutoplay();
    const { onTouchStartHandler, onTouchMoveHandler, onTouchEndHandler } = useAccessability();
    const { elementObservedRef } = useIntersectionObserver();
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--sliding-duration': `${slidingDuration}ms`,
        '--sliding-delay': `${slidingDelay}ms`,
        '--slide-transition-delay': `${getSlidingCycleDuration()}ms`,
        '--slider-width': layout.width ? `${layout.width}px` : undefined,
        '--slider-height': layout.height ? `${layout.height}px` : undefined,
        '--slider-color': settings.sliderColor,
        '--slider-fade-in-duration': `${sliderFadeInDuration}ms`,
        '--nav-fade-in-duration': `${navbarFadeInDuration}ms`,
        '--nav-fade-in-delay': `${navbarFadeInDelay}ms`,
        '--nav-background-color': settings.navbarStyle
            ? settings.navbarStyle.color
            : undefined,
        '--nav-active-color': settings.navbarStyle
            ? settings.navbarStyle.activeColor
            : undefined,
        '--mask-duration': `${getSlidingCycleDuration()}ms`
    };
    return (React__default.createElement("div", { className: composeCssClasses('hero-slider-root', className), ref: elementObservedRef },
        React__default.createElement("div", { ref: layout.slider, className: composeCssClasses('hero-slider-wrapper', HeroSliderModuleCss.Wrapper), onTouchStart: onTouchStartHandler, onTouchMove: onTouchMoveHandler, onTouchEnd: onTouchEndHandler, onMouseMoveCapture: debounce, style: Object.assign(Object.assign(Object.assign({}, CSSVariables), style), { width: width, height: height }) },
            children,
            shouldDisplayButtons && React__default.createElement(Buttons, null))));
}
function HeroSlider(props) {
    return (React__default.createElement(LayoutProvider, null,
        React__default.createElement(ManagerProvider, { manager: props.manager },
            React__default.createElement(SettingsProvider, { settings: props.settings },
                React__default.createElement(ControllerProvider, { controller: props.controller },
                    React__default.createElement(AccessabilityProvider, { accessability: props.accessability },
                        React__default.createElement(AnimationsProvider, { animations: props.animations },
                            React__default.createElement(IntersectionObserverProvider, null,
                                React__default.createElement(AutoplayProvider, { autoplay: props.autoplay },
                                    React__default.createElement(Orchestrator, { className: props.className, width: props.width, height: props.height, style: props.style }, props.children))))))))));
}

export { HeroSlider as default };
//# sourceMappingURL=HeroSlider.js.map
