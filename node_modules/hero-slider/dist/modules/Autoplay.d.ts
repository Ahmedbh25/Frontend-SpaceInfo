/// <reference types="node" />
import React from 'react';
import { IntervalState } from './IntervalTimer';
interface Props {
    /**
     * Autoplay duration, interval or duration betweens slide transitions, in milliseconds.
     * If it's lower than the sliding cycle duration (sliding duration + sliding delay), then the sliding cycle duration will be used instead.
     * @default 8000
     */
    autoplayDuration?: number;
    /**
     * Time (in milliseconds) in which the autoplay will be debounced if the user interacts with the slider.
     * The autoplay resumes if the user stops interacting after this duration.
     * Set as 0 to disable this feature.
     * @default 4000
     */
    autoplayDebounce?: number;
}
export declare type AutoplayProps = Props | boolean;
interface State {
    isPausedByUser: boolean;
    debounceTimeout?: NodeJS.Timeout;
}
declare type ProviderProps = React.PropsWithChildren<{
    autoplay?: AutoplayProps;
}>;
declare function AutoplayProvider({ children, autoplay }: ProviderProps): JSX.Element;
declare function useAutoplay(): {
    state: State;
    autoplayState: IntervalState;
    debounce: () => void;
    pause: () => void;
    resume: () => void;
};
export { AutoplayProvider, useAutoplay };
//# sourceMappingURL=Autoplay.d.ts.map