import React__default from 'react';

/**
 * Detecs if on a mobile device.
 */
function isMobile() {
    // But first, detect if running on the browser in case of SSR:
    const isBrowser = typeof window !== 'undefined';
    if (isBrowser) {
        if (navigator &&
            /Mobi|Android/i.test(navigator.userAgentData || navigator.userAgent))
            return true;
        else
            return false;
    }
    return false;
}
const defaultProps = {
    isMobile: isMobile()
};
const ManagerStateContext = React__default.createContext(undefined);
function managerReducer(state, action) {
    switch (action.type) {
        case 'update-is-mobile': {
            return Object.assign(Object.assign({}, state), { isMobile: state.isMobile });
        }
        case 'register-slide': {
            const { slides } = state;
            slides.set(action.payload.ref, {
                ref: action.payload.ref,
                number: slides.size + 1,
                label: action.payload.label
            });
            return { isMobile: state.isMobile, slides, totalSlides: slides.size };
        }
        case 'remove-slide': {
            const { slides } = state;
            slides.delete(action.payload);
            return { isMobile: state.isMobile, slides, totalSlides: slides.size };
        }
        default: {
            throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);
        }
    }
}
function ManagerProvider({ children, manager }) {
    var _a;
    const [state, dispatch] = React__default.useReducer(managerReducer, {
        isMobile: (_a = manager === null || manager === void 0 ? void 0 : manager.isMobile) !== null && _a !== void 0 ? _a : defaultProps.isMobile,
        slides: new Map(),
        totalSlides: 0
    });
    /**
     * Finds a Slide by its React `ref`.
     */
    const getSlide = (ref) => {
        return state.slides.get(ref);
    };
    /**
     * Registers a rendered Slide.
     */
    const registerSlide = (ref, label) => {
        dispatch({
            type: 'register-slide',
            payload: {
                ref,
                label
            }
        });
    };
    /**
     * Removes a Slide.
     */
    const removeSlide = (ref) => {
        dispatch({
            type: 'remove-slide',
            payload: ref
        });
    };
    /**
     * If `manager.isMobile` prop changes, update the current state.
     */
    React__default.useEffect(() => {
        if (typeof (manager === null || manager === void 0 ? void 0 : manager.isMobile) === 'boolean')
            dispatch({
                type: 'update-is-mobile',
                payload: manager === null || manager === void 0 ? void 0 : manager.isMobile
            });
    }, [manager === null || manager === void 0 ? void 0 : manager.isMobile]);
    // NOTE: you *might* need to memoize this value
    // Learn more in http://kcd.im/optimize-context
    const value = { state, getSlide, registerSlide, removeSlide };
    return (React__default.createElement(ManagerStateContext.Provider, { value: value }, children));
}
function useManager() {
    const context = React__default.useContext(ManagerStateContext);
    if (context === undefined) {
        throw new Error('useManager must be used within a ManagerProvider');
    }
    return context;
}

export { ManagerProvider, useManager };
//# sourceMappingURL=Manager.js.map
