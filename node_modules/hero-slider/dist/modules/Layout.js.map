{"version":3,"file":"Layout.js","sources":["../../src/modules/Layout.tsx"],"sourcesContent":["import React from 'react';\nimport type CSS from 'csstype';\n\nconst mobileThreshold = 1024;\n\ntype Action = {\n  type: 'update-slider-dimensions';\n};\ntype State = {\n  slider: React.RefObject<HTMLDivElement>;\n  width?: CSS.Properties['width'];\n  height?: CSS.Properties['height'];\n};\n\nconst LayoutStateContext = React.createContext<\n  { state: State; mobileThreshold: number } | undefined\n>(undefined);\n\nfunction layoutReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'update-slider-dimensions': {\n      return {\n        slider: state.slider,\n        width: state.slider.current?.clientWidth as CSS.Properties['width'],\n        height: state.slider.current?.clientHeight as CSS.Properties['height']\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction LayoutProvider({ children }: React.PropsWithChildren) {\n  const [state, dispatch] = React.useReducer(layoutReducer, {\n    slider: React.useRef<HTMLElement>(null),\n    width: undefined,\n    height: undefined\n  } as State);\n\n  /**\n   * After mounting, similar to `componentDidMount`, set up the window event listeners and update dimensions.\n   */\n  React.useEffect(() => {\n    function updateSliderDimensions() {\n      if (state.slider.current) dispatch({ type: 'update-slider-dimensions' });\n    }\n\n    updateSliderDimensions();\n\n    window.addEventListener(\n      'resize',\n      updateSliderDimensions as EventListenerOrEventListenerObject\n    );\n    /**\n     * Clearing event listener to avoid memory leaks.\n     */\n    return () => {\n      window.removeEventListener(\n        'resize',\n        updateSliderDimensions as EventListenerOrEventListenerObject\n      );\n    };\n  }, [state.slider.current]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = { state, mobileThreshold };\n\n  return (\n    <LayoutStateContext.Provider value={value}>\n      {children}\n    </LayoutStateContext.Provider>\n  );\n}\n\nfunction useLayout() {\n  const context = React.useContext(LayoutStateContext);\n\n  if (context === undefined) {\n    throw new Error('useLayout must be used within a LayoutProvider');\n  }\n\n  return context;\n}\n\nexport { LayoutProvider, useLayout };\n"],"names":["React"],"mappings":";;AAGA,MAAM,eAAe,GAAG,IAAI,CAAC;AAW7B,MAAM,kBAAkB,GAAGA,cAAK,CAAC,aAAa,CAE5C,SAAS,CAAC,CAAC;AAEb,SAAS,aAAa,CAAC,KAAY,EAAE,MAAc,EAAA;;IACjD,QAAQ,MAAM,CAAC,IAAI;QACjB,KAAK,0BAA0B,EAAE;YAC/B,OAAO;gBACL,MAAM,EAAE,KAAK,CAAC,MAAM;gBACpB,KAAK,EAAE,MAAA,KAAK,CAAC,MAAM,CAAC,OAAO,0CAAE,WAAsC;gBACnE,MAAM,EAAE,MAAA,KAAK,CAAC,MAAM,CAAC,OAAO,0CAAE,YAAwC;aACvE,CAAC;AACH,SAAA;AACD,QAAA,SAAS;AACP,YAAA,MAAM,IAAI,KAAK,CAAC,CAAsB,mBAAA,EAAA,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAA,CAAA,CAAG,CAAC,CAAC;AAC3E,SAAA;AACF,KAAA;AACH,CAAC;AAED,SAAS,cAAc,CAAC,EAAE,QAAQ,EAA2B,EAAA;IAC3D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAGA,cAAK,CAAC,UAAU,CAAC,aAAa,EAAE;AACxD,QAAA,MAAM,EAAEA,cAAK,CAAC,MAAM,CAAc,IAAI,CAAC;AACvC,QAAA,KAAK,EAAE,SAAS;AAChB,QAAA,MAAM,EAAE,SAAS;AACT,KAAA,CAAC,CAAC;AAEZ;;AAEG;AACH,IAAAA,cAAK,CAAC,SAAS,CAAC,MAAK;AACnB,QAAA,SAAS,sBAAsB,GAAA;AAC7B,YAAA,IAAI,KAAK,CAAC,MAAM,CAAC,OAAO;AAAE,gBAAA,QAAQ,CAAC,EAAE,IAAI,EAAE,0BAA0B,EAAE,CAAC,CAAC;SAC1E;AAED,QAAA,sBAAsB,EAAE,CAAC;AAEzB,QAAA,MAAM,CAAC,gBAAgB,CACrB,QAAQ,EACR,sBAA4D,CAC7D,CAAC;AACF;;AAEG;AACH,QAAA,OAAO,MAAK;AACV,YAAA,MAAM,CAAC,mBAAmB,CACxB,QAAQ,EACR,sBAA4D,CAC7D,CAAC;AACJ,SAAC,CAAC;KACH,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;;;AAI3B,IAAA,MAAM,KAAK,GAAG,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;AAEzC,IAAA,QACEA,cAAA,CAAA,aAAA,CAAC,kBAAkB,CAAC,QAAQ,EAAA,EAAC,KAAK,EAAE,KAAK,EAAA,EACtC,QAAQ,CACmB,EAC9B;AACJ,CAAC;AAED,SAAS,SAAS,GAAA;IAChB,MAAM,OAAO,GAAGA,cAAK,CAAC,UAAU,CAAC,kBAAkB,CAAC,CAAC;IAErD,IAAI,OAAO,KAAK,SAAS,EAAE;AACzB,QAAA,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;AACnE,KAAA;AAED,IAAA,OAAO,OAAO,CAAC;AACjB;;;;"}