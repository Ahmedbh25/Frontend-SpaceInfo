{"version":3,"file":"Settings.js","sources":["../../src/modules/Settings.tsx"],"sourcesContent":["import React from 'react';\nimport type CSS from 'csstype';\nimport ConsoleLogger, { LoggerLevels } from './ConsoleLogger';\nimport { PartiallyRequired } from '../utils/PartiallyRequired';\n\nexport interface SettingsProps {\n  /**\n   * Sets up the `--slider-color` CSS variable.\n   * @default 'inherit'\n   */\n  sliderColor?: CSS.Properties['color'];\n  /**\n   * Inline CSS styling for the wrapper div element of the component.\n   * @default {}\n   */\n  sliderStyle?: Omit<CSS.Properties, 'width' | 'height'>;\n  /**\n   * Aesthetics settings. You can configure the base color and the active color of all nav components within the `HeroSlider`. They can be set individually as well.\n   * @default\n   * {\n   *    color: undefined,\n   *    activeColor: undefined\n   * }\n   */\n  navbarStyle?: {\n    color?: CSS.Properties['color'];\n    activeColor?: CSS.Properties['color'];\n  };\n  /**\n   * Debugger logs level. Only useful if you need insights.\n   * @default\n   * {\n   *    verbose: false,\n   *    info: false,\n   *    debug: false,\n   *    warnings: true,\n   *    errors: true\n   * }\n   */\n  debug?: LoggerLevels | undefined;\n}\n\nconst defaultProps: PartiallyRequired<SettingsProps, 'debug'> = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\n\ntype ProviderProps = React.PropsWithChildren<{ settings?: SettingsProps }>;\n\nconst SettingsStateContext = React.createContext<\n  PartiallyRequired<SettingsProps, 'debug'> | undefined\n>(undefined);\n\nfunction SettingsProvider({ children, settings }: ProviderProps) {\n  const params: PartiallyRequired<SettingsProps, 'debug'> = {\n    sliderColor: settings?.sliderColor || defaultProps.sliderColor,\n    sliderStyle: settings?.sliderStyle || defaultProps.sliderStyle,\n    navbarStyle: settings?.navbarStyle || defaultProps.navbarStyle,\n    debug: settings?.debug\n  };\n\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React.useEffect(() => {\n    ConsoleLogger.new(params.debug);\n  }, [params.debug]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n\n  return (\n    <SettingsStateContext.Provider value={value}>\n      {children}\n    </SettingsStateContext.Provider>\n  );\n}\n\nfunction useSettings() {\n  const context = React.useContext(SettingsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n\n  return context;\n}\n\nexport { SettingsProvider, useSettings };\n"],"names":["React"],"mappings":";;;AA0CA,MAAM,YAAY,GAA8C;AAC9D,IAAA,WAAW,EAAE,SAAS;AACtB,IAAA,WAAW,EAAE,EAAE;AACf,IAAA,WAAW,EAAE;AACX,QAAA,KAAK,EAAE,SAAS;AAChB,QAAA,WAAW,EAAE,SAAS;AACvB,KAAA;CACF,CAAC;AAIF,MAAM,oBAAoB,GAAGA,cAAK,CAAC,aAAa,CAE9C,SAAS,CAAC,CAAC;AAEb,SAAS,gBAAgB,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAiB,EAAA;AAC7D,IAAA,MAAM,MAAM,GAA8C;AACxD,QAAA,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;AAC9D,QAAA,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;AAC9D,QAAA,WAAW,EAAE,CAAA,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,WAAW,KAAI,YAAY,CAAC,WAAW;AAC9D,QAAA,KAAK,EAAE,QAAQ,KAAA,IAAA,IAAR,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE,KAAK;KACvB,CAAC;AAEF;;AAEG;AACH,IAAAA,cAAK,CAAC,SAAS,CAAC,MAAK;AACnB,QAAA,aAAa,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAClC,KAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;;;IAInB,MAAM,KAAK,GAAG,MAAM,CAAC;AAErB,IAAA,QACEA,cAAA,CAAA,aAAA,CAAC,oBAAoB,CAAC,QAAQ,EAAA,EAAC,KAAK,EAAE,KAAK,EAAA,EACxC,QAAQ,CACqB,EAChC;AACJ,CAAC;AAED,SAAS,WAAW,GAAA;IAClB,MAAM,OAAO,GAAGA,cAAK,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;IAEvD,IAAI,OAAO,KAAK,SAAS,EAAE;AACzB,QAAA,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;AACvE,KAAA;AAED,IAAA,OAAO,OAAO,CAAC;AACjB;;;;"}