import React__default from 'react';
import ConsoleLogger from './ConsoleLogger.js';

const defaultProps = {
    sliderColor: 'inherit',
    sliderStyle: {},
    navbarStyle: {
        color: undefined,
        activeColor: undefined
    }
};
const SettingsStateContext = React__default.createContext(undefined);
function SettingsProvider({ children, settings }) {
    const params = {
        sliderColor: (settings === null || settings === void 0 ? void 0 : settings.sliderColor) || defaultProps.sliderColor,
        sliderStyle: (settings === null || settings === void 0 ? void 0 : settings.sliderStyle) || defaultProps.sliderStyle,
        navbarStyle: (settings === null || settings === void 0 ? void 0 : settings.navbarStyle) || defaultProps.navbarStyle,
        debug: settings === null || settings === void 0 ? void 0 : settings.debug
    };
    /**
     * Set up ConsoleLogger whenever the `params.debug` change.
     */
    React__default.useEffect(() => {
        ConsoleLogger.new(params.debug);
    }, [params.debug]);
    // NOTE: you *might* need to memoize this value
    // Learn more in http://kcd.im/optimize-context
    const value = params;
    return (React__default.createElement(SettingsStateContext.Provider, { value: value }, children));
}
function useSettings() {
    const context = React__default.useContext(SettingsStateContext);
    if (context === undefined) {
        throw new Error('useSettings must be used within a SettingsProvider');
    }
    return context;
}

export { SettingsProvider, useSettings };
//# sourceMappingURL=Settings.js.map
