import React__default from 'react';
import SlideModuleCss from './index.module.css.js';
import Background from './Background/index.js';
import Mask from './Mask/index.js';
import { useManager } from '../../modules/Manager.js';
import { useController } from '../../modules/Controller.js';
import { useAnimations } from '../../modules/Animations.js';
import { composeCssClasses } from '../../utils/composeCssClasses.js';
import ConsoleLogger from '../../modules/ConsoleLogger.js';

const logger = ConsoleLogger.new();
function Slide(props) {
    const { className, shouldRenderMask = false, style, background, onBackgroundLoad, children, label } = props;
    const { getSlide, registerSlide, removeSlide } = useManager();
    const { state: { activeSlide, isSliding, prevActiveSlide, slidingDirection } } = useController(); // controller
    const { getSlidingAnimationCssClass } = useAnimations();
    const slideRef = React__default.useRef(null);
    const slide = getSlide(slideRef);
    logger.info('[Slide] rerender', 'slide.number: ', slide === null || slide === void 0 ? void 0 : slide.number);
    const [classNames, setClassNames] = React__default.useState(composeCssClasses('hero-slider-slide', SlideModuleCss.Slide, className));
    const isActive = activeSlide === (slide === null || slide === void 0 ? void 0 : slide.number);
    React__default.useEffect(() => {
        if (slide) {
            setClassNames(composeCssClasses('hero-slider-slide', SlideModuleCss.Slide, { className: SlideModuleCss.Active, useIf: isActive }, { className: SlideModuleCss.Sliding, useIf: isActive && !isSliding }, {
                className: getSlidingAnimationCssClass(slide.number, prevActiveSlide, slidingDirection),
                useIf: isActive && isSliding
            }));
        }
    }, [isActive, isSliding]);
    React__default.useEffect(() => {
        if (slideRef)
            registerSlide(slideRef, label);
        return () => {
            if (slideRef)
                removeSlide(slideRef);
        };
    }, []);
    if (!slide)
        return null;
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--background-animation-duration': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDuration)
            ? `${background.backgroundAnimationDuration}ms`
            : null,
        '--background-animation-delay': (background === null || background === void 0 ? void 0 : background.backgroundAnimationDelay)
            ? `${background.backgroundAnimationDelay}ms`
            : null
    };
    return (React__default.createElement("div", { ref: slideRef, className: classNames, style: Object.assign(Object.assign({}, style), CSSVariables) },
        React__default.createElement(Background, Object.assign({}, background, { onLoad: onBackgroundLoad })),
        React__default.createElement("div", { className: composeCssClasses('hero-slider-slide-wrapper', SlideModuleCss.Wrapper) },
            shouldRenderMask ? (React__default.createElement(Mask, { background: background, isActive: isActive })) : null,
            React__default.createElement("div", { className: composeCssClasses('hero-slider-slide-container', SlideModuleCss.Container, { className: SlideModuleCss.Active, useIf: isActive && !isSliding }) }, children))));
}
Slide.displayName = 'hero-slider/slide';

export { Slide };
//# sourceMappingURL=index.js.map
