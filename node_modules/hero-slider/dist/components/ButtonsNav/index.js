import React__default from 'react';
import ButtonsNavModuleCss from './index.module.css.js';
import { Nav } from '../Nav/index.js';
import { useManager } from '../../modules/Manager.js';
import { useController } from '../../modules/Controller.js';
import { useLayout } from '../../modules/Layout.js';
import { composeCssClasses } from '../../utils/composeCssClasses.js';

function ButtonsNav(props) {
    const { color, activeColor, backgroundColor, position = {
        bottom: '0',
        left: '50%',
        transform: 'translateX(-50%)'
    }, justifyContent, alignItems, mobileThreshold: componentMobileThreshold, isNullAfterThreshold = false, extraButton, isExtraButtonRight } = props;
    const { state: { width }, mobileThreshold } = useLayout();
    const { state: { slides, totalSlides } } = useManager();
    const { state: { activeSlide }, changeSlide } = useController();
    /**
     * CSS variables for the transitions.
     */
    const CSSVariables = {
        '--nav-color': color,
        '--nav-background-color': backgroundColor,
        '--nav-active-color': activeColor
    };
    if (Number(width) <= (componentMobileThreshold !== null && componentMobileThreshold !== void 0 ? componentMobileThreshold : mobileThreshold)) {
        if (isNullAfterThreshold)
            return null;
        return React__default.createElement(Nav, Object.assign({}, props));
    }
    function renderButtons() {
        if (!totalSlides)
            return [];
        const onClickHandler = (slideNumber) => {
            if (slideNumber !== activeSlide)
                changeSlide(slideNumber);
        };
        return Array.from(slides.values()).map(({ number, label }) => {
            const description = label;
            return (
            // TODO: Deal with the disabled linting later:
            // eslint-disable-next-line jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions
            React__default.createElement("li", { key: number, className: composeCssClasses('hero-slider-buttons-nav-button', ButtonsNavModuleCss.Button, {
                    className: ButtonsNavModuleCss.Active,
                    useIf: activeSlide === number
                }), onClick: () => onClickHandler(number) },
                React__default.createElement("div", { className: composeCssClasses('hero-slider-buttons-nav-button-description', ButtonsNavModuleCss.Description) },
                    React__default.createElement("div", { className: composeCssClasses('hero-slider-buttons-nav-button-text', ButtonsNavModuleCss.Text) }, description))));
        });
    }
    return (React__default.createElement("div", { className: composeCssClasses('hero-slider-buttons-nav-wrapper', ButtonsNavModuleCss.Wrapper), style: Object.assign(Object.assign({}, position), CSSVariables) },
        React__default.createElement("ul", { className: composeCssClasses('hero-slider-buttons-nav-container', ButtonsNavModuleCss.Container), style: {
                justifyContent: justifyContent || 'center',
                /**
                 * The **vertical alignment** of the buttons can be set manually.
                 * If it's undefined and if there is a position top passed as prop,
                 * then `alignItems` will be `flex-start`. Otherwise,
                 * it is set as `flex-end`.
                 */
                alignItems: alignItems ||
                    (position.top !== undefined ? 'flex-start' : 'flex-end')
            } },
            renderButtons(),
            extraButton && (React__default.createElement("div", { className: composeCssClasses('hero-slider-buttons-nav-extra-button', ButtonsNavModuleCss.ExtraButton), style: {
                    order: isExtraButtonRight ? 1 : 0
                } }, extraButton)))));
}
ButtonsNav.displayName = 'hero-slider/buttons-nav';

export { ButtonsNav };
//# sourceMappingURL=index.js.map
