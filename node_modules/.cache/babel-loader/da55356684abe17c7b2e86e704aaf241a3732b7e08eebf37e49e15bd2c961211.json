{"ast":null,"code":"import React__default from 'react';\nimport AutoplayButtonModuleCss from './index.module.css.js';\nimport { useAutoplay } from '../../modules/Autoplay.js';\nimport { IntervalState } from '../../modules/IntervalTimer.js';\nimport { composeCssClasses } from '../../utils/composeCssClasses.js';\nvar ButtonType;\n(function (ButtonType) {\n  ButtonType[\"PLAY\"] = \"play\";\n  ButtonType[\"PAUSE\"] = \"pause\";\n})(ButtonType || (ButtonType = {}));\nclass AutoplaySvg {\n  static getPath(buttonType) {\n    if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;else return AutoplaySvg.playPath;\n  }\n}\nAutoplaySvg.playPath = 'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z';\nAutoplaySvg.pausePath = 'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z';\nfunction AutoplayButton(props) {\n  const {\n    className,\n    style,\n    position = {\n      bottom: '0',\n      left: '0'\n    }\n  } = props;\n  const {\n    state: {\n      isPausedByUser\n    },\n    autoplayState,\n    resume,\n    pause\n  } = useAutoplay();\n  const [buttonType, setButtonType] = React__default.useState(autoplayState !== IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY);\n  const onClickHandler = event => {\n    event.stopPropagation();\n    if (isPausedByUser) resume();else pause();\n  };\n  React__default.useEffect(() => {\n    if (isPausedByUser && autoplayState === IntervalState.IDLE) setButtonType(ButtonType.PLAY);else if (isPausedByUser && autoplayState === IntervalState.PAUSED) setButtonType(ButtonType.PLAY);else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n  return React__default.createElement(\"button\", {\n    className: composeCssClasses('hero-slider-autoplay-button', AutoplayButtonModuleCss.Button, className),\n    onClick: onClickHandler,\n    style: Object.assign(Object.assign({}, position), style)\n  }, React__default.createElement(\"svg\", {\n    fill: \"currentColor\",\n    height: \"100%\",\n    width: \"100%\",\n    viewBox: \"0 0 36 36\"\n  }, React__default.createElement(\"path\", {\n    d: AutoplaySvg.getPath(buttonType)\n  })));\n}\nAutoplayButton.displayName = 'hero-slider/autoplay-button';\nexport { AutoplayButton };","map":{"version":3,"mappings":";;;;;AAOA,IAAKA,UAGJ;AAHD,WAAKA,UAAU;EACbA,2BAAa;EACbA,6BAAe;AACjB,CAAC,EAHIA,UAAU,KAAVA,UAAU,GAGd;AA0BD,MAAMC,WAAW;EAOR,OAAOC,OAAO,CAACC,UAAsB;IAC1C,IAAIA,UAAU,KAAKH,UAAU,CAACI,KAAK,EAAE,OAAOH,WAAW,CAACI,SAAS,CAAC,KAC7D,OAAOJ,WAAW,CAACK,QAAQ;;;AARpBL,WAAQ,YACpB,iEAA0E;AAE9DA,WAAS,aACrB,yDAAkE;AAQhE,SAAUM,cAAc,CAACC,KAA0B;EACvD,MAAM;IACJC,SAAS;IACTC,KAAK;IACLC,QAAQ,GAAG;MACTC,MAAM,EAAE,GAAG;MACXC,IAAI,EAAE;;EACP,CACF,GAAGL,KAAK;EAET,MAAM;IACJM,KAAK,EAAE;MAAEC;IAAc,CAAE;IACzBC,aAAa;IACbC,MAAM;IACNC;EAAK,CACN,GAAGC,WAAW,EAAE;EAEjB,MAAM,CAAChB,UAAU,EAAEiB,aAAa,CAAC,GAAGC,cAAK,CAACC,QAAQ,CAChDN,aAAa,KAAKO,aAAa,CAACC,IAAI,GAAGxB,UAAU,CAACI,KAAK,GAAGJ,UAAU,CAACyB,IAAI,CAC1E;EAED,MAAMC,cAAc,GAClBC,KAAsD,IACpD;IACFA,KAAK,CAACC,eAAe,EAAE;IACvB,IAAIb,cAAc,EAAEE,MAAM,EAAE,CAAC,KACxBC,KAAK,EAAE;EACd,CAAC;EAEDG,cAAK,CAACQ,SAAS,CAAC,MAAK;IACnB,IAAId,cAAc,IAAIC,aAAa,KAAKO,aAAa,CAACC,IAAI,EACxDJ,aAAa,CAACpB,UAAU,CAACyB,IAAI,CAAC,CAAC,KAC5B,IAAIV,cAAc,IAAIC,aAAa,KAAKO,aAAa,CAACO,MAAM,EAC/DV,aAAa,CAACpB,UAAU,CAACyB,IAAI,CAAC,CAAC,KAC5BL,aAAa,CAACpB,UAAU,CAACI,KAAK,CAAC;EACtC,CAAC,EAAE,CAACW,cAAc,EAAEC,aAAa,CAAC,CAAC;EAEnC,OACEK;IACEZ,SAAS,EAAEsB,iBAAiB,CAC1B,6BAA6B,EAC7BC,uBAAuB,CAACC,MAAM,EAC9BxB,SAAS,CACV;IACDyB,OAAO,EAAER,cAAc;IACvBhB,KAAK,kCACAC,QAAQ,GACRD,KAAK;EAAA,GAGVW;IAAKc,IAAI,EAAC,cAAc;IAACC,MAAM,EAAC,MAAM;IAACC,KAAK,EAAC,MAAM;IAACC,OAAO,EAAC;EAAW,GACrEjB;IAAMkB,CAAC,EAAEtC,WAAW,CAACC,OAAO,CAACC,UAAU;EAAC,CAAI,EACxC,CACC;AAEb;AAECI,cAA0C,CAACiC,WAAW,GACrD,6BAA6B","names":["ButtonType","AutoplaySvg","getPath","buttonType","PAUSE","pausePath","playPath","AutoplayButton","props","className","style","position","bottom","left","state","isPausedByUser","autoplayState","resume","pause","useAutoplay","setButtonType","React","useState","IntervalState","IDLE","PLAY","onClickHandler","event","stopPropagation","useEffect","PAUSED","composeCssClasses","AutoplayButtonModuleCss","Button","onClick","fill","height","width","viewBox","d","displayName"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/node_modules/hero-slider/src/components/AutoplayButton/index.tsx"],"sourcesContent":["import React from 'react';\nimport AutoplayButtonModuleCss from './index.module.css';\nimport { NavPosition } from '../Nav';\nimport { useAutoplay } from '../../modules/Autoplay';\nimport { IntervalState } from '../../modules/IntervalTimer';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\n\nenum ButtonType {\n  PLAY = 'play',\n  PAUSE = 'pause'\n}\n\n/**\n * `AutoplayButton` component props.\n */\nexport interface AutoplayButtonProps {\n  /**\n   * CSS class name.\n   */\n  className?: React.HTMLAttributes<HTMLElement>['className'];\n  /**\n   * Object of CSS properties `top`, `left`, `bottom`, and `right` used to absolutely position elements.\n   * Aside from the former, you can also set the CSS `transform` property to help you center the element.\n   * @default\n   * {\n   *    bottom: '0',\n   *    left: '0'\n   * }\n   */\n  position?: NavPosition;\n  /**\n   * Inline CSS styling.\n   */\n  style?: React.CSSProperties;\n}\n\nclass AutoplaySvg {\n  public static playPath =\n    'M 12,26 18.5,22 18.5,14 12,10 z M 18.5,22 25,18 25,18 18.5,14 z' as const;\n\n  public static pausePath =\n    'M 12,26 16,26 16,10 12,10 z M 21,26 25,26 25,10 21,10 z' as const;\n\n  public static getPath(buttonType: ButtonType): string {\n    if (buttonType === ButtonType.PAUSE) return AutoplaySvg.pausePath;\n    else return AutoplaySvg.playPath;\n  }\n}\n\nexport function AutoplayButton(props: AutoplayButtonProps) {\n  const {\n    className,\n    style,\n    position = {\n      bottom: '0',\n      left: '0'\n    }\n  } = props;\n\n  const {\n    state: { isPausedByUser },\n    autoplayState,\n    resume,\n    pause\n  } = useAutoplay();\n\n  const [buttonType, setButtonType] = React.useState<ButtonType>(\n    autoplayState !== IntervalState.IDLE ? ButtonType.PAUSE : ButtonType.PLAY\n  );\n\n  const onClickHandler = (\n    event: React.MouseEvent<HTMLButtonElement, MouseEvent>\n  ) => {\n    event.stopPropagation();\n    if (isPausedByUser) resume();\n    else pause();\n  };\n\n  React.useEffect(() => {\n    if (isPausedByUser && autoplayState === IntervalState.IDLE)\n      setButtonType(ButtonType.PLAY);\n    else if (isPausedByUser && autoplayState === IntervalState.PAUSED)\n      setButtonType(ButtonType.PLAY);\n    else setButtonType(ButtonType.PAUSE);\n  }, [isPausedByUser, autoplayState]);\n\n  return (\n    <button\n      className={composeCssClasses(\n        'hero-slider-autoplay-button',\n        AutoplayButtonModuleCss.Button,\n        className\n      )}\n      onClick={onClickHandler}\n      style={{\n        ...position,\n        ...style\n      }}\n    >\n      <svg fill=\"currentColor\" height=\"100%\" width=\"100%\" viewBox=\"0 0 36 36\">\n        <path d={AutoplaySvg.getPath(buttonType)} />\n      </svg>\n    </button>\n  );\n}\n\n(AutoplayButton as React.FunctionComponent).displayName =\n  'hero-slider/autoplay-button';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}