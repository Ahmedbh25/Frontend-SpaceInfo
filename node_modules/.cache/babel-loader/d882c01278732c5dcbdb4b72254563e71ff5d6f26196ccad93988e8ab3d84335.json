{"ast":null,"code":"import React__default from 'react';\nimport { useController } from './Controller.js';\n\n/**\n * `AccessabilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nvar AccessabilityOrientation;\n(function (AccessabilityOrientation) {\n  AccessabilityOrientation[\"VERTICAL\"] = \"vertical\";\n  AccessabilityOrientation[\"HORIZONTAL\"] = \"horizontal\";\n})(AccessabilityOrientation || (AccessabilityOrientation = {}));\nconst defaultProps = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessabilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\nconst AccessabilityStateContext = React__default.createContext(undefined);\nfunction accessabilityReducer(state, action) {\n  switch (action.type) {\n    case 'start-motion':\n      {\n        return {\n          initialX: action.payload.x,\n          initialY: action.payload.y,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    case 'update-motion':\n      {\n        return {\n          initialX: state.initialX,\n          initialY: state.initialY,\n          currentX: action.payload.x,\n          currentY: action.payload.y\n        };\n      }\n    case 'end-motion':\n      {\n        return {\n          initialX: undefined,\n          initialY: undefined,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    default:\n      {\n        throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n      }\n  }\n}\nfunction AccessabilityProvider(_ref) {\n  let {\n    children,\n    accessability\n  } = _ref;\n  var _a, _b, _c;\n  const params = {\n    shouldDisplayButtons: (_a = accessability === null || accessability === void 0 ? void 0 : accessability.shouldDisplayButtons) !== null && _a !== void 0 ? _a : defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress: (_b = accessability === null || accessability === void 0 ? void 0 : accessability.shouldSlideOnArrowKeypress) !== null && _b !== void 0 ? _b : defaultProps.shouldSlideOnArrowKeypress,\n    orientation: (accessability === null || accessability === void 0 ? void 0 : accessability.orientation) || defaultProps.orientation,\n    thresholdToSlide: (_c = accessability === null || accessability === void 0 ? void 0 : accessability.thresholdToSlide) !== null && _c !== void 0 ? _c : defaultProps.thresholdToSlide\n  };\n  const [state, dispatch] = React__default.useReducer(accessabilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  });\n  const {\n    goToNextSlide,\n    goToPreviousSlide\n  } = useController();\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = event => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = event => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n    const isSlidingHorizontally = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally = params.orientation === AccessabilityOrientation.HORIZONTAL;\n    const isSliderVertically = params.orientation === AccessabilityOrientation.VERTICAL;\n    if (isSlidingHorizontally && isSliderSetHorizontally && Math.abs(diffX) >= params.thresholdToSlide) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();else goToPreviousSlide();\n    } else if (isSliderVertically && Math.abs(diffY) >= params.thresholdToSlide) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();else goToPreviousSlide();\n    }\n    dispatch({\n      type: 'end-motion'\n    });\n  };\n  const onArrowKeypressHandler = e => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n    const isHorizontal = params.orientation === AccessabilityOrientation.HORIZONTAL;\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && e.keyCode === 37:\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && e.keyCode === 39:\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && e.keyCode === 38:\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && e.keyCode === 40:\n        goToNextSlide();\n        break;\n    }\n  };\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React__default.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n  return React__default.createElement(AccessabilityStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useAccessability() {\n  const context = React__default.useContext(AccessabilityStateContext);\n  if (context === undefined) {\n    throw new Error('useAccessability must be used within a AccessabilityProvider');\n  }\n  return context;\n}\nexport { AccessabilityOrientation, AccessabilityProvider, useAccessability };","map":{"version":3,"mappings":"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","names":["AccessabilityOrientation","defaultProps","shouldDisplayButtons","shouldSlideOnArrowKeypress","orientation","HORIZONTAL","thresholdToSlide","AccessabilityStateContext","React","createContext","undefined","accessabilityReducer","state","action","type","initialX","payload","x","initialY","y","currentX","currentY","Error","stringify","AccessabilityProvider","children","accessability","params","dispatch","useReducer","goToNextSlide","goToPreviousSlide","useController","onTouchStartHandler","event","touches","clientX","clientY","onTouchMoveHandler","onTouchEndHandler","diffX","Number","diffY","isSlidingHorizontally","Math","abs","isSliderSetHorizontally","isSliderVertically","VERTICAL","isSwipingRight","isSwipingUp","onArrowKeypressHandler","e","isHorizontal","keyCode","useEffect","window","addEventListener","removeEventListener","value","Provider","useAccessability","context","useContext"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/node_modules/hero-slider/src/modules/Accessability.tsx"],"sourcesContent":["import React from 'react';\nimport { useController } from './Controller';\n\n/**\n * `AccessabilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexport enum AccessabilityOrientation {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal'\n}\n\nexport interface AccessabilityProps {\n  /**\n   * Controls render of the next and previous buttons.\n   * @default true\n   */\n  shouldDisplayButtons?: boolean;\n  /**\n   * When an arrow key is pressed, the active slide will change respectively to the pressed arrow.\n   * The left and down arrows will set the previous slide, and the right and up arrows will set the next slide.\n   * The left and right will only work if the slider is horizontal, and the up and down arrows will only work if the slider is vertical.\n   * @default true\n   */\n  shouldSlideOnArrowKeypress?: boolean;\n  /**\n   * The slider orientation can either set to be `horizontal` or `vertical`.\n   * The orientation sets the slide buttons respective to the orientation (e.g. if vertical, the buttons will be at the top and at the bottom).\n   * Swipe (touch) gestures in mobile devices to change slides will also be configured automatically depending on the orientation (e.g. if horizontal, swiping vertically won't change slides).\n   * @default 'horizontal'\n   */\n  orientation?: `${AccessabilityOrientation}`;\n  /**\n   * Pixel threshold for the Slider to register a swiping command to change slides.\n   * @default 50\n   */\n  thresholdToSlide?: number;\n}\n\ntype Action =\n  | {\n      type: 'start-motion';\n      payload: { x: number; y: number };\n    }\n  | {\n      type: 'update-motion';\n      payload: { x: number; y: number };\n    }\n  | { type: 'end-motion' };\ntype State = {\n  initialX: number | undefined;\n  initialY: number | undefined;\n  currentX: number | undefined;\n  currentY: number | undefined;\n};\ntype ProviderProps = React.PropsWithChildren<{\n  accessability?: AccessabilityProps;\n}>;\n\nconst defaultProps: Required<AccessabilityProps> = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessabilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\n\nconst AccessabilityStateContext = React.createContext<\n  | {\n      state: State;\n      shouldDisplayButtons: boolean;\n      orientation: AccessabilityOrientation;\n      onTouchStartHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchMoveHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchEndHandler: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction accessabilityReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-motion': {\n      return {\n        initialX: action.payload.x,\n        initialY: action.payload.y,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    case 'update-motion': {\n      return {\n        initialX: state.initialX,\n        initialY: state.initialY,\n        currentX: action.payload.x,\n        currentY: action.payload.y\n      };\n    }\n    case 'end-motion': {\n      return {\n        initialX: undefined,\n        initialY: undefined,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AccessabilityProvider({ children, accessability }: ProviderProps) {\n  const params: Required<AccessabilityProps> = {\n    shouldDisplayButtons:\n      accessability?.shouldDisplayButtons ?? defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress:\n      accessability?.shouldSlideOnArrowKeypress ??\n      defaultProps.shouldSlideOnArrowKeypress,\n    orientation: accessability?.orientation || defaultProps.orientation,\n    thresholdToSlide:\n      accessability?.thresholdToSlide ?? defaultProps.thresholdToSlide\n  };\n\n  const [state, dispatch] = React.useReducer(accessabilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  } as State);\n\n  const { goToNextSlide, goToPreviousSlide } = useController();\n\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n\n    const isSlidingHorizontally: boolean = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally: boolean =\n      params.orientation === AccessabilityOrientation.HORIZONTAL;\n    const isSliderVertically: boolean =\n      params.orientation === AccessabilityOrientation.VERTICAL;\n\n    if (\n      isSlidingHorizontally &&\n      isSliderSetHorizontally &&\n      Math.abs(diffX) >= params.thresholdToSlide\n    ) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();\n      else goToPreviousSlide();\n    } else if (\n      isSliderVertically &&\n      Math.abs(diffY) >= params.thresholdToSlide\n    ) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();\n      else goToPreviousSlide();\n    }\n\n    dispatch({ type: 'end-motion' });\n  };\n\n  const onArrowKeypressHandler = (e: KeyboardEvent): void => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n\n    const isHorizontal =\n      params.orientation === AccessabilityOrientation.HORIZONTAL;\n\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && e.keyCode === 37:\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && e.keyCode === 39:\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && e.keyCode === 38:\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && e.keyCode === 40:\n        goToNextSlide();\n        break;\n      default: // Do nothing.\n    }\n  };\n\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation as AccessabilityOrientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n\n  return (\n    <AccessabilityStateContext.Provider value={value}>\n      {children}\n    </AccessabilityStateContext.Provider>\n  );\n}\n\nfunction useAccessability() {\n  const context = React.useContext(AccessabilityStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useAccessability must be used within a AccessabilityProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { AccessabilityProvider, useAccessability };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}