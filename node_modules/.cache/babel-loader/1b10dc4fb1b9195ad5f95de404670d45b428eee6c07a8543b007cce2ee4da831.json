{"ast":null,"code":"import React__default from 'react';\nimport { useInView } from '../node_modules/.pnpm/react-intersection-observer@9.4.0_react@18.2.0/node_modules/react-intersection-observer/react-intersection-observer.modern.mjs.js';\nconst IntersectionObserverStateContext = React__default.createContext(undefined);\nfunction IntersectionObserverProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [ref, inView] = useInView({\n    threshold: 0\n  });\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    elementObservedRef: ref,\n    isInView: inView\n  };\n  return React__default.createElement(IntersectionObserverStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useIntersectionObserver() {\n  const context = React__default.useContext(IntersectionObserverStateContext);\n  if (context === undefined) {\n    throw new Error('useIntersectionObserver must be used within a IntersectionObserverProvider');\n  }\n  return context;\n}\nexport { IntersectionObserverProvider, useIntersectionObserver };","map":{"version":3,"mappings":";;AAKA,MAAMA,gCAAgC,GAAGC,cAAK,CAACC,aAAa,CAM1DC,SAAS,CAAC;AAEZ,SAASC,4BAA4B,OAA4B;EAAA,IAA3B;IAAEC;EAAQ,CAAiB;EAC/D,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGC,SAAS,CAAC;IAAEC,SAAS,EAAE;EAAC,CAAE,CAAC;;;EAIjD,MAAMC,KAAK,GAAG;IACZC,kBAAkB,EAAEL,GAAG;IACvBM,QAAQ,EAAEL;GACX;EAED,OACEN,6BAACD,gCAAgC,CAACa,QAAQ;IAACH,KAAK,EAAEA;EAAK,GACpDL,QAAQ,CACiC;AAEhD;AAEA,SAASS,uBAAuB;EAC9B,MAAMC,OAAO,GAAGd,cAAK,CAACe,UAAU,CAAChB,gCAAgC,CAAC;EAElE,IAAIe,OAAO,KAAKZ,SAAS,EAAE;IACzB,MAAM,IAAIc,KAAK,CACb,4EAA4E,CAC7E;EACF;EAED,OAAOF,OAAO;AAChB","names":["IntersectionObserverStateContext","React","createContext","undefined","IntersectionObserverProvider","children","ref","inView","useInView","threshold","value","elementObservedRef","isInView","Provider","useIntersectionObserver","context","useContext","Error"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/node_modules/hero-slider/src/modules/IntersectionObserver.tsx"],"sourcesContent":["import React from 'react';\nimport { useInView } from 'react-intersection-observer';\n\ntype ProviderProps = React.PropsWithChildren;\n\nconst IntersectionObserverStateContext = React.createContext<\n  | {\n      elementObservedRef: (node?: Element | null | undefined) => void;\n      isInView: boolean;\n    }\n  | undefined\n>(undefined);\n\nfunction IntersectionObserverProvider({ children }: ProviderProps) {\n  const [ref, inView] = useInView({ threshold: 0 });\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    elementObservedRef: ref,\n    isInView: inView\n  };\n\n  return (\n    <IntersectionObserverStateContext.Provider value={value}>\n      {children}\n    </IntersectionObserverStateContext.Provider>\n  );\n}\n\nfunction useIntersectionObserver() {\n  const context = React.useContext(IntersectionObserverStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useIntersectionObserver must be used within a IntersectionObserverProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { IntersectionObserverProvider, useIntersectionObserver };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}