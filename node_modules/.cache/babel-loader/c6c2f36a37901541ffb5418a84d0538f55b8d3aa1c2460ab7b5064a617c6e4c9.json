{"ast":null,"code":"import React__default from 'react';\nimport ConsoleLogger from './ConsoleLogger.js';\nconst defaultProps = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\nconst SettingsStateContext = React__default.createContext(undefined);\nfunction SettingsProvider(_ref) {\n  let {\n    children,\n    settings\n  } = _ref;\n  const params = {\n    sliderColor: (settings === null || settings === void 0 ? void 0 : settings.sliderColor) || defaultProps.sliderColor,\n    sliderStyle: (settings === null || settings === void 0 ? void 0 : settings.sliderStyle) || defaultProps.sliderStyle,\n    navbarStyle: (settings === null || settings === void 0 ? void 0 : settings.navbarStyle) || defaultProps.navbarStyle,\n    debug: settings === null || settings === void 0 ? void 0 : settings.debug\n  };\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React__default.useEffect(() => {\n    ConsoleLogger.new(params.debug);\n  }, [params.debug]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n  return React__default.createElement(SettingsStateContext.Provider, {\n    value: value\n  }, children);\n}\nfunction useSettings() {\n  const context = React__default.useContext(SettingsStateContext);\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n}\nexport { SettingsProvider, useSettings };","map":{"version":3,"mappings":";;AA0CA,MAAMA,YAAY,GAA8C;EAC9DC,WAAW,EAAE,SAAS;EACtBC,WAAW,EAAE,EAAE;EACfC,WAAW,EAAE;IACXC,KAAK,EAAEC,SAAS;IAChBC,WAAW,EAAED;EACd;CACF;AAID,MAAME,oBAAoB,GAAGC,cAAK,CAACC,aAAa,CAE9CJ,SAAS,CAAC;AAEZ,SAASK,gBAAgB,OAAsC;EAAA,IAArC;IAAEC,QAAQ;IAAEC;EAAQ,CAAiB;EAC7D,MAAMC,MAAM,GAA8C;IACxDZ,WAAW,EAAE,SAAQ,aAARW,QAAQ,uBAARA,QAAQ,CAAEX,WAAW,KAAID,YAAY,CAACC,WAAW;IAC9DC,WAAW,EAAE,SAAQ,aAARU,QAAQ,uBAARA,QAAQ,CAAEV,WAAW,KAAIF,YAAY,CAACE,WAAW;IAC9DC,WAAW,EAAE,SAAQ,aAARS,QAAQ,uBAARA,QAAQ,CAAET,WAAW,KAAIH,YAAY,CAACG,WAAW;IAC9DW,KAAK,EAAEF,QAAQ,aAARA,QAAQ,KAAR,0BAAQ,CAAEE;GAClB;EAED;;AAEG;EACHN,cAAK,CAACO,SAAS,CAAC,MAAK;IACnBC,aAAa,CAACC,GAAG,CAACJ,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC,EAAE,CAACD,MAAM,CAACC,KAAK,CAAC,CAAC;;;EAIlB,MAAMI,KAAK,GAAGL,MAAM;EAEpB,OACEL,6BAACD,oBAAoB,CAACY,QAAQ;IAACD,KAAK,EAAEA;EAAK,GACxCP,QAAQ,CACqB;AAEpC;AAEA,SAASS,WAAW;EAClB,MAAMC,OAAO,GAAGb,cAAK,CAACc,UAAU,CAACf,oBAAoB,CAAC;EAEtD,IAAIc,OAAO,KAAKhB,SAAS,EAAE;IACzB,MAAM,IAAIkB,KAAK,CAAC,oDAAoD,CAAC;EACtE;EAED,OAAOF,OAAO;AAChB","names":["defaultProps","sliderColor","sliderStyle","navbarStyle","color","undefined","activeColor","SettingsStateContext","React","createContext","SettingsProvider","children","settings","params","debug","useEffect","ConsoleLogger","new","value","Provider","useSettings","context","useContext","Error"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/node_modules/hero-slider/src/modules/Settings.tsx"],"sourcesContent":["import React from 'react';\nimport type CSS from 'csstype';\nimport ConsoleLogger, { LoggerLevels } from './ConsoleLogger';\nimport { PartiallyRequired } from '../utils/PartiallyRequired';\n\nexport interface SettingsProps {\n  /**\n   * Sets up the `--slider-color` CSS variable.\n   * @default 'inherit'\n   */\n  sliderColor?: CSS.Properties['color'];\n  /**\n   * Inline CSS styling for the wrapper div element of the component.\n   * @default {}\n   */\n  sliderStyle?: Omit<CSS.Properties, 'width' | 'height'>;\n  /**\n   * Aesthetics settings. You can configure the base color and the active color of all nav components within the `HeroSlider`. They can be set individually as well.\n   * @default\n   * {\n   *    color: undefined,\n   *    activeColor: undefined\n   * }\n   */\n  navbarStyle?: {\n    color?: CSS.Properties['color'];\n    activeColor?: CSS.Properties['color'];\n  };\n  /**\n   * Debugger logs level. Only useful if you need insights.\n   * @default\n   * {\n   *    verbose: false,\n   *    info: false,\n   *    debug: false,\n   *    warnings: true,\n   *    errors: true\n   * }\n   */\n  debug?: LoggerLevels | undefined;\n}\n\nconst defaultProps: PartiallyRequired<SettingsProps, 'debug'> = {\n  sliderColor: 'inherit',\n  sliderStyle: {},\n  navbarStyle: {\n    color: undefined,\n    activeColor: undefined\n  }\n};\n\ntype ProviderProps = React.PropsWithChildren<{ settings?: SettingsProps }>;\n\nconst SettingsStateContext = React.createContext<\n  PartiallyRequired<SettingsProps, 'debug'> | undefined\n>(undefined);\n\nfunction SettingsProvider({ children, settings }: ProviderProps) {\n  const params: PartiallyRequired<SettingsProps, 'debug'> = {\n    sliderColor: settings?.sliderColor || defaultProps.sliderColor,\n    sliderStyle: settings?.sliderStyle || defaultProps.sliderStyle,\n    navbarStyle: settings?.navbarStyle || defaultProps.navbarStyle,\n    debug: settings?.debug\n  };\n\n  /**\n   * Set up ConsoleLogger whenever the `params.debug` change.\n   */\n  React.useEffect(() => {\n    ConsoleLogger.new(params.debug);\n  }, [params.debug]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = params;\n\n  return (\n    <SettingsStateContext.Provider value={value}>\n      {children}\n    </SettingsStateContext.Provider>\n  );\n}\n\nfunction useSettings() {\n  const context = React.useContext(SettingsStateContext);\n\n  if (context === undefined) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n\n  return context;\n}\n\nexport { SettingsProvider, useSettings };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}