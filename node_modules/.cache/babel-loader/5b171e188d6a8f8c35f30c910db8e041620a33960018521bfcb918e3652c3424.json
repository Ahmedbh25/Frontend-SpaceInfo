{"ast":null,"code":"import React__default from 'react';\nimport SideNavModuleCss from './index.module.css.js';\nimport { useController } from '../../modules/Controller.js';\nimport { useManager } from '../../modules/Manager.js';\nimport { composeCssClasses } from '../../utils/composeCssClasses.js';\nfunction SideNav(_ref) {\n  let {\n    color,\n    activeColor,\n    left,\n    right,\n    isPositionedRight = true,\n    position = {\n      bottom: undefined,\n      top: '50%',\n      left: !isPositionedRight ? left || '1rem' : undefined,\n      right: isPositionedRight ? right || '1rem' : undefined,\n      transform: 'translateY(-50%)'\n    }\n  } = _ref;\n  const {\n    state: {\n      slides,\n      totalSlides\n    }\n  } = useManager();\n  const {\n    state: {\n      activeSlide\n    },\n    changeSlide\n  } = useController();\n  function renderButtons() {\n    if (!totalSlides) return [];\n    const onClickHandler = slideNumber => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n    return Array.from(slides.values()).map(_ref2 => {\n      let {\n        number\n      } = _ref2;\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events\n        React__default.createElement(\"li\", {\n          key: number,\n          className: composeCssClasses('hero-slider-side-nav-button', SideNavModuleCss.Button, {\n            className: SideNavModuleCss.Active,\n            useIf: activeSlide === number\n          }),\n          onClick: () => onClickHandler(number),\n          style: {\n            justifyContent: isPositionedRight ? 'flex-end' : 'flex-start'\n          }\n        }, React__default.createElement(\"span\", {\n          className: composeCssClasses('hero-slider-side-nav-button-line', SideNavModuleCss.Line)\n        }), React__default.createElement(\"span\", {\n          className: composeCssClasses('hero-slider-side-nav-button-number', SideNavModuleCss.Number)\n        }, number.toLocaleString()))\n      );\n    });\n  }\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n  return React__default.createElement(\"ul\", {\n    className: composeCssClasses('hero-slider-side-nav-wrapper', SideNavModuleCss.Wrapper),\n    style: Object.assign(Object.assign({}, position), CSSVariables)\n  }, renderButtons());\n}\nSideNav.displayName = 'hero-slider/nav';\nexport { SideNav };","map":{"version":3,"mappings":";;;;;SAuCgBA,OAAO,OAaR;EAAA,IAbS;IACtBC,KAAK;IACLC,WAAW;IACXC,IAAI;IACJC,KAAK;IACLC,iBAAiB,GAAG,IAAI;IACxBC,QAAQ,GAAG;MACTC,MAAM,EAAEC,SAAS;MACjBC,GAAG,EAAE,KAAK;MACVN,IAAI,EAAE,CAACE,iBAAiB,GAAGF,IAAI,IAAI,MAAM,GAAGK,SAAS;MACrDJ,KAAK,EAAEC,iBAAiB,GAAGD,KAAK,IAAI,MAAM,GAAGI,SAAS;MACtDE,SAAS,EAAE;;EACZ,CACY;EACb,MAAM;IACJC,KAAK,EAAE;MAAEC,MAAM;MAAEC;IAAW;EAAE,CAC/B,GAAGC,UAAU,EAAE;EAEhB,MAAM;IACJH,KAAK,EAAE;MAAEI;IAAW,CAAE;IACtBC;EAAW,CACZ,GAAGC,aAAa,EAAE;EAEnB,SAASC,aAAa;IACpB,IAAI,CAACL,WAAW,EAAE,OAAO,EAAE;IAE3B,MAAMM,cAAc,GAAIC,WAAmB,IAAI;MAC7C,IAAIA,WAAW,KAAKL,WAAW,EAAEC,WAAW,CAACI,WAAW,CAAC;IAC3D,CAAC;IAED,OAAOC,KAAK,CAACC,IAAI,CAACV,MAAM,CAACW,MAAM,EAAE,CAAC,CAACC,GAAG,CAAC,SAAe;MAAA,IAAd;QAAEC;MAAM,CAAE;MAChD;;;QAGEC;UACEC,GAAG,EAAEF,MAAM;UACXG,SAAS,EAAEC,iBAAiB,CAC1B,6BAA6B,EAC7BC,gBAAgB,CAACC,MAAM,EACvB;YACEH,SAAS,EAAEE,gBAAgB,CAACE,MAAM;YAClCC,KAAK,EAAElB,WAAW,KAAKU;UACxB,EACF;UACDS,OAAO,EAAE,MAAMf,cAAc,CAACM,MAAM,CAAC;UACrCU,KAAK,EAAE;YACLC,cAAc,EAAE/B,iBAAiB,GAAG,UAAU,GAAG;UAClD;QAAA,GAEDqB,cACE;UAAAE,SAAS,EAAEC,iBAAiB,CAC1B,kCAAkC,EAClCC,gBAAgB,CAACO,IAAI;QACtB,CACD,GACFX;UACEE,SAAS,EAAEC,iBAAiB,CAC1B,oCAAoC,EACpCC,gBAAgB,CAACQ,MAAM;QACxB,GAEAb,MAAM,CAACc,cAAc,EAAE,CACnB;MACJ;IAET,CAAC,CAAC;;EAGJ;;AAEG;EACH,MAAMC,YAAY,GAAG;IACnB,aAAa,EAAEvC,KAAK;IACpB,oBAAoB,EAAEC;GACvB;EAED,OACEwB;IACEE,SAAS,EAAEC,iBAAiB,CAC1B,8BAA8B,EAC9BC,gBAAgB,CAACW,OAAO,CACzB;IACDN,KAAK,EACAO,wCAAQ,CACR,cAAY;EAAA,GAGhBxB,aAAa,EAAE,CACb;AAET;AAEClB,OAAmC,CAAC2C,WAAW,GAAG,iBAAiB","names":["SideNav","color","activeColor","left","right","isPositionedRight","position","bottom","undefined","top","transform","state","slides","totalSlides","useManager","activeSlide","changeSlide","useController","renderButtons","onClickHandler","slideNumber","Array","from","values","map","number","React","key","className","composeCssClasses","SideNavModuleCss","Button","Active","useIf","onClick","style","justifyContent","Line","Number","toLocaleString","CSSVariables","Wrapper","Object","displayName"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/node_modules/hero-slider/src/components/SideNav/index.tsx"],"sourcesContent":["import React from 'react';\nimport SideNavModuleCss from './index.module.css';\nimport { NavPosition, NavProps } from '../Nav';\nimport { useController } from '../../modules/Controller';\nimport { useManager } from '../../modules/Manager';\nimport { composeCssClasses } from '../../utils/composeCssClasses';\n\n/**\n * `SideNav` component props.\n */\nexport interface SideNavProps extends NavProps {\n  /**\n   * Defines the inline CSS property `right` of the component.\n   */\n  right?: React.CSSProperties['right'];\n  /**\n   * Defines the inline CSS property `left` of the component.\n   */\n  left?: React.CSSProperties['left'];\n  /**\n   * Defines the position. If you set it to the left, set this to false to disable any existing `right` CSS properties and avoid any conflicts.\n   * @default true\n   */\n  isPositionedRight?: boolean;\n  /**\n   * Object of CSS properties `top`, `left`, `bottom`, and `right` used to absolutely position elements.\n   * Aside from the former, you can also set the CSS `transform` property to help you center the element.\n   * @default\n   * {\n   *    bottom: undefined,\n   *    top: '50%',\n   *    left: !isPositionedRight ? left || '1rem' : undefined,\n   *    right: isPositionedRight ? right || '1rem' : undefined,\n   *    transform: 'translateY(-50%)'\n   * }\n   */\n  position?: NavPosition;\n}\n\nexport function SideNav({\n  color,\n  activeColor,\n  left,\n  right,\n  isPositionedRight = true,\n  position = {\n    bottom: undefined,\n    top: '50%',\n    left: !isPositionedRight ? left || '1rem' : undefined,\n    right: isPositionedRight ? right || '1rem' : undefined,\n    transform: 'translateY(-50%)'\n  }\n}: SideNavProps) {\n  const {\n    state: { slides, totalSlides }\n  } = useManager();\n\n  const {\n    state: { activeSlide },\n    changeSlide\n  } = useController();\n\n  function renderButtons() {\n    if (!totalSlides) return [];\n\n    const onClickHandler = (slideNumber: number) => {\n      if (slideNumber !== activeSlide) changeSlide(slideNumber);\n    };\n\n    return Array.from(slides.values()).map(({ number }) => {\n      return (\n        // TODO: Deal with the disabled linting later:\n        // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/click-events-have-key-events\n        <li\n          key={number}\n          className={composeCssClasses(\n            'hero-slider-side-nav-button',\n            SideNavModuleCss.Button,\n            {\n              className: SideNavModuleCss.Active,\n              useIf: activeSlide === number\n            }\n          )}\n          onClick={() => onClickHandler(number)}\n          style={{\n            justifyContent: isPositionedRight ? 'flex-end' : 'flex-start'\n          }}\n        >\n          <span\n            className={composeCssClasses(\n              'hero-slider-side-nav-button-line',\n              SideNavModuleCss.Line\n            )}\n          />\n          <span\n            className={composeCssClasses(\n              'hero-slider-side-nav-button-number',\n              SideNavModuleCss.Number\n            )}\n          >\n            {number.toLocaleString()}\n          </span>\n        </li>\n      );\n    });\n  }\n\n  /**\n   * CSS variables for the transitions.\n   */\n  const CSSVariables = {\n    '--nav-color': color,\n    '--nav-active-color': activeColor\n  };\n\n  return (\n    <ul\n      className={composeCssClasses(\n        'hero-slider-side-nav-wrapper',\n        SideNavModuleCss.Wrapper\n      )}\n      style={{\n        ...position,\n        ...CSSVariables\n      }}\n    >\n      {renderButtons()}\n    </ul>\n  );\n}\n\n(SideNav as React.FunctionComponent).displayName = 'hero-slider/nav';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}