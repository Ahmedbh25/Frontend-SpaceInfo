{"ast":null,"code":"import laptop from '../img/products/laptop2.jpeg';\nimport desktop from '../img/products/desktop3.jpeg';\nimport phone from '../img/products/phone2.jpeg';\nimport otherProd from '../img/products/otherProd.jpeg';\nexport const generatePhoto = imagePath => {\n  let img;\n  if (imagePath.toLowerCase() === \"laptop\") {\n    img = laptop;\n  } else if (imagePath.toLowerCase() === \"desktop\") {\n    img = desktop;\n  } else if (imagePath.toLowerCase() === \"phone\") {\n    img = phone;\n  } else {\n    img = otherProd;\n  }\n  return img;\n};\nexport const reducerSidenav = (state, action) => {\n  const updatedTypes = {\n    ...state.toggle,\n    [action.payload]: !state.toggle[action.payload]\n  };\n  const productsliststor = localStorage.getItem('initialComputers');\n  const Computerscovss = JSON.parse(productsliststor);\n  const updatedPro = Computerscovss.filter(prod => prod.type.toLowerCase() === action.payload.toLowerCase());\n  Object.keys(updatedTypes).forEach(key => {\n    if (key !== action.payload && updatedTypes[key] === true) {\n      updatedTypes[key] = false;\n    }\n  });\n  return {\n    updatedTypes,\n    updatedPro\n  };\n};\nexport const Email_Password_Verifcation = (email, password, errorEmail, errorPassword) => {\n  const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const passwordRegex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{5,16}$/;\n  if (!emailRegex.test(email)) {\n    return errorEmail.current.innerHTML = \"email must accept the standards\";\n  } else {\n    errorEmail.current.innerHTML = \"\";\n  }\n  if (!passwordRegex.test(password)) {\n    return errorPassword.current.innerHTML = \"Password must contain at least 8 caracters letters & numbers\";\n  } else {\n    errorPassword.current.innerHTML = \"\";\n  }\n};\n_c = Email_Password_Verifcation;\nexport const Register_Verification = (FieldState, errorUsername, errorEmail, errorPassword, errorFirstn, errorLastn, errorAddress, errorCity, errorState, errorCountry, errorPhone) => {\n  const fetch_error = Email_Password_Verifcation(FieldState.email, FieldState.password, errorEmail, errorPassword);\n  if (fetch_error) {\n    return errorState;\n  }\n  const ruleRegex1 = /^[a-zA-Z]{6,}$/;\n  const ruleRegex2 = /^.{5,}$/;\n  const phoneRegex = /^\\d{2} \\d{3} \\d{3}$/;\n  if (ruleRegex2.test(FieldState.username)) {\n    return errorUsername.current.innerHTML = \"username must be over 5 caracters & contain only letters\";\n  } else {\n    errorUsername.current.innerHTML = \"\";\n  }\n  if (ruleRegex1.test(FieldState.first_name)) {\n    return errorUsername.current.innerHTML = \"First name must be over 5 caracters & contain only letters\";\n  } else {\n    errorUsername.current.innerHTML = \"\";\n  }\n  if (ruleRegex1.test(FieldState.last_name)) {\n    return errorUsername.current.innerHTML = \"Last name must be over 5 caracters & contain only letters\";\n  } else {}\n  if (ruleRegex2.test(FieldState.address)) {\n    return errorAddress.current.innerHTML = \"Adress must at least 5 caracters\";\n  } else {\n    errorAddress.current.innerHTML = \"\";\n  }\n  if (ruleRegex1.test(FieldState.city)) {\n    return errorCity.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n  } else {\n    errorCity.current.innerHTML = \"\";\n  }\n  if (ruleRegex1.test(FieldState.state)) {\n    return errorState.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n  } else {\n    errorState.current.innerHTML = \"\";\n  }\n  if (ruleRegex1.test(FieldState.country)) {\n    return errorCountry.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n  } else {\n    errorCountry.current.innerHTML = \"\";\n  }\n  if (phoneRegex.test(FieldState.phone)) {\n    return errorPhone.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n  } else {\n    errorPhone.current.innerHTML = \"\";\n  }\n};\n_c2 = Register_Verification;\nvar _c, _c2;\n$RefreshReg$(_c, \"Email_Password_Verifcation\");\n$RefreshReg$(_c2, \"Register_Verification\");","map":{"version":3,"names":["laptop","desktop","phone","otherProd","generatePhoto","imagePath","img","toLowerCase","reducerSidenav","state","action","updatedTypes","toggle","payload","productsliststor","localStorage","getItem","Computerscovss","JSON","parse","updatedPro","filter","prod","type","Object","keys","forEach","key","Email_Password_Verifcation","email","password","errorEmail","errorPassword","emailRegex","passwordRegex","test","current","innerHTML","Register_Verification","FieldState","errorUsername","errorFirstn","errorLastn","errorAddress","errorCity","errorState","errorCountry","errorPhone","fetch_error","ruleRegex1","ruleRegex2","phoneRegex","username","first_name","last_name","address","city","country"],"sources":["/home/hana/Desktop/Projects/level1/space-infoPC/client/src/utils/utilFunctions.js"],"sourcesContent":["import laptop from '../img/products/laptop2.jpeg';\nimport desktop from '../img/products/desktop3.jpeg'\nimport phone from '../img/products/phone2.jpeg';\nimport otherProd from '../img/products/otherProd.jpeg';\n\nexport const generatePhoto = (imagePath) => {\n    let img;\n    if (imagePath.toLowerCase() === \"laptop\") {\n        img = laptop;\n    } else if (imagePath.toLowerCase() === \"desktop\") {\n        img = desktop;\n    } else if (imagePath.toLowerCase() === \"phone\") {\n        img = phone;\n    } else {\n        img = otherProd;\n    }\n    return img;\n}\n\n\n\nexport const reducerSidenav = (state, action) => {\n    const updatedTypes = { ...state.toggle, [action.payload]: !state.toggle[action.payload] }\n    const productsliststor = localStorage.getItem('initialComputers');\n    const Computerscovss = JSON.parse(productsliststor);\n    const updatedPro = Computerscovss.filter(prod => prod.type.toLowerCase() === action.payload.toLowerCase());\n    Object.keys(updatedTypes).forEach(key => {\n        if (key !== action.payload && updatedTypes[key] === true) {\n            updatedTypes[key] = false;\n        }\n    });\n\n    return { updatedTypes, updatedPro }\n}\n\n\n\n\n\nexport const Email_Password_Verifcation = (email, password,errorEmail, errorPassword ) => {\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n    const passwordRegex = /^(?=.*[0-9])[a-zA-Z0-9!@#$%^&*]{5,16}$/;\n    if (!(emailRegex.test(email))) {\n        return errorEmail.current.innerHTML = \"email must accept the standards\";\n    } else {\n        errorEmail.current.innerHTML = \"\";\n    }\n\n    if (!(passwordRegex.test(password))) {\n        return errorPassword.current.innerHTML = \"Password must contain at least 8 caracters letters & numbers\";\n    } else {\n        errorPassword.current.innerHTML = \"\";\n    }\n}\n\nexport const Register_Verification = (FieldState, errorUsername, errorEmail, errorPassword, errorFirstn, errorLastn, errorAddress, errorCity, errorState, errorCountry, errorPhone) =>{\n    const fetch_error = Email_Password_Verifcation(FieldState.email, FieldState.password, errorEmail, errorPassword);\n    if(fetch_error){\n        return errorState\n    }\n\n    const ruleRegex1 = /^[a-zA-Z]{6,}$/;\n    const ruleRegex2 = /^.{5,}$/;\n    const phoneRegex = /^\\d{2} \\d{3} \\d{3}$/;\n    \n    if(ruleRegex2.test(FieldState.username)){\n        return errorUsername.current.innerHTML = \"username must be over 5 caracters & contain only letters\";\n    }else{\n        errorUsername.current.innerHTML = \"\"\n    }\n\n    if(ruleRegex1.test(FieldState.first_name)){\n        return errorUsername.current.innerHTML = \"First name must be over 5 caracters & contain only letters\";\n    }else{\n        errorUsername.current.innerHTML = \"\";\n    }\n\n    if(ruleRegex1.test(FieldState.last_name)){\n        return errorUsername.current.innerHTML = \"Last name must be over 5 caracters & contain only letters\";\n    }else{\n        \n    }\n\n    if(ruleRegex2.test(FieldState.address)){\n        return errorAddress.current.innerHTML = \"Adress must at least 5 caracters\";\n    }else{\n        errorAddress.current.innerHTML = \"\";\n    }\n\n    if(ruleRegex1.test(FieldState.city)){\n        return errorCity.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n\n    }else{\n        errorCity.current.innerHTML = \"\";\n    }\n\n    if(ruleRegex1.test(FieldState.state)){\n        return errorState.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n    }else{\n        errorState.current.innerHTML = \"\";\n    }\n\n    if(ruleRegex1.test(FieldState.country)){\n        return errorCountry.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n\n    }else{\n        errorCountry.current.innerHTML = \"\";\n    }\n\n    if(phoneRegex.test(FieldState.phone)){\n        return errorPhone.current.innerHTML = \"City must be over 5 caracters & contain only letters\";\n\n    }else{\n        errorPhone.current.innerHTML = \"\";        \n    }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}